//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IService")]
public interface IService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetData", ReplyAction="http://tempuri.org/IService/SetDataResponse")]
    string SetData(string result, string CipherKey, int score, string owner);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetData", ReplyAction="http://tempuri.org/IService/SetDataResponse")]
    System.Threading.Tasks.Task<string> SetDataAsync(string result, string CipherKey, int score, string owner);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNews", ReplyAction="http://tempuri.org/IService/GetNewsResponse")]
    string GetNews();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNews", ReplyAction="http://tempuri.org/IService/GetNewsResponse")]
    System.Threading.Tasks.Task<string> GetNewsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTop20", ReplyAction="http://tempuri.org/IService/GetTop20Response")]
    string GetTop20();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetTop20", ReplyAction="http://tempuri.org/IService/GetTop20Response")]
    System.Threading.Tasks.Task<string> GetTop20Async();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetVersion", ReplyAction="http://tempuri.org/IService/GetVersionResponse")]
    string GetVersion();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetVersion", ReplyAction="http://tempuri.org/IService/GetVersionResponse")]
    System.Threading.Tasks.Task<string> GetVersionAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCipher", ReplyAction="http://tempuri.org/IService/GetCipherResponse")]
    string GetCipher();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCipher", ReplyAction="http://tempuri.org/IService/GetCipherResponse")]
    System.Threading.Tasks.Task<string> GetCipherAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/GetData", ReplyAction = "http://tempuri.org/IService/GetDataResponse")]
    string GetData(int Amount);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
    System.Threading.Tasks.Task<string> GetDataAsync(int Amount);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService/GetData", ReplyAction = "http://tempuri.org/IService/GetDataResponse")]
    bool SetLog(string type, string message, string data, string client, string ip, string name);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IServiceChannel : IService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ServiceClient : System.ServiceModel.ClientBase<IService>, IService
{
    
    public ServiceClient()
    {
    }
    
    public ServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public string SetData(string result, string CipherKey, int score, string owner)
    {
        return base.Channel.SetData(result, CipherKey, score, owner);
    }
    
    public System.Threading.Tasks.Task<string> SetDataAsync(string result, string CipherKey, int score, string owner)
    {
        return base.Channel.SetDataAsync(result, CipherKey, score, owner);
    }
    
    public string GetNews()
    {
        return base.Channel.GetNews();
    }
    
    public System.Threading.Tasks.Task<string> GetNewsAsync()
    {
        return base.Channel.GetNewsAsync();
    }
    
    public string GetTop20()
    {
        return base.Channel.GetTop20();
    }
    
    public System.Threading.Tasks.Task<string> GetTop20Async()
    {
        return base.Channel.GetTop20Async();
    }
    
    public string GetVersion()
    {
        return base.Channel.GetVersion();
    }
    
    public System.Threading.Tasks.Task<string> GetVersionAsync()
    {
        return base.Channel.GetVersionAsync();
    }
    
    public string GetCipher()
    {
        return base.Channel.GetCipher();
    }
    
    public System.Threading.Tasks.Task<string> GetCipherAsync()
    {
        return base.Channel.GetCipherAsync();
    }
    
    public string GetData(int Amount)
    {
        return base.Channel.GetData(Amount);
    }
    
    public System.Threading.Tasks.Task<string> GetDataAsync(int Amount)
    {
        return base.Channel.GetDataAsync(Amount);
    }

    public bool SetLog(string type, string message, string data, string client, string ip, string name)
    {
        return base.Channel.SetLog(type, message, data, client, ip, name);
    }
}
